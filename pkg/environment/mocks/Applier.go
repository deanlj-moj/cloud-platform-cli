// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	tfexec "github.com/hashicorp/terraform-exec/tfexec"
	mock "github.com/stretchr/testify/mock"
)

// Applier is an autogenerated mock type for the Applier type
type Applier struct {
	mock.Mock
}

// ConfigureInit provides a mock function with given fields: namespace
func (_m *Applier) ConfigureInit(namespace string) []tfexec.InitOption {
	ret := _m.Called(namespace)

	var r0 []tfexec.InitOption
	if rf, ok := ret.Get(0).(func(string) []tfexec.InitOption); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]tfexec.InitOption)
		}
	}

	return r0
}

// Initialize provides a mock function with given fields:
func (_m *Applier) Initialize() {
	_m.Called()
}

// KubectlApply provides a mock function with given fields: namespace, directory, dryRun
func (_m *Applier) KubectlApply(namespace string, directory string, dryRun bool) (string, error) {
	ret := _m.Called(namespace, directory, dryRun)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, bool) string); ok {
		r0 = rf(namespace, directory, dryRun)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, bool) error); ok {
		r1 = rf(namespace, directory, dryRun)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewApplier interface {
	mock.TestingT
	Cleanup(func())
}

// NewApplier creates a new instance of Applier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewApplier(t mockConstructorTestingTNewApplier) *Applier {
	mock := &Applier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
