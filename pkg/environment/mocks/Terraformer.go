// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	testing "testing"

	mock "github.com/stretchr/testify/mock"
)

// Terraformer is an autogenerated mock type for the Terraformer type
type Terraformer struct {
	mock.Mock
}

// Initialize provides a mock function with given fields:
func (_m *Terraformer) Initialize() {
	_m.Called()
}

// TerraformDestroy provides a mock function with given fields: directory
func (_m *Terraformer) TerraformDestroy(directory string) error {
	ret := _m.Called(directory)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(directory)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TerraformInitAndApply provides a mock function with given fields: namespace, directory
func (_m *Terraformer) TerraformInitAndApply(namespace string, directory string) (map[string]string, error) {
	ret := _m.Called(namespace, directory)

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func(string, string) map[string]string); ok {
		r0 = rf(namespace, directory)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(namespace, directory)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTerraformer creates a new instance of Terraformer. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewTerraformer(t testing.TB) *Terraformer {
	mock := &Terraformer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
